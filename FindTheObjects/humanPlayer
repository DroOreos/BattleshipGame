import java.util.Scanner;

/**
 * Represents a human player in the Battleship game.
 */
public class HumanPlayer extends AbstractPlayer {

	private Scanner input = new Scanner(System.in);
	private int num_shipsSunk;

	/**
	 * Constructor
	 */
	public HumanPlayer(String name) {
		super(name);
		num_shipsSunk = 0;

	}

	/**
	 * Places the ships on the game board by getting valid locations from the user.
	 */
	@Override
	public void placeShips() {
		boolean validLocation;

		for (Ship ship : ships) {
			validLocation = false;
			while (!validLocation) {

				int row = getValidRowInput();
				int col = getValidColumnInput();
				boolean horizontal = getHorizontalInput();

				// Check if the placement on the board is valid Downwards or rightwards.
				if (isValidShipPlacement(ship, row, col, horizontal)) {
					game.placeShip(col, row, ship.length, horizontal);
					validLocation = true;
				} else {
					System.out.println("ERROR try another location;");

				}
			}
		}
	}

	/**
	 * Makes a move on the game board in the GUI version of the game.
	 *
	 * @param game_status The current game board status.
	 */
	@Override
	public void makeMoveGUI(Gameboard game_status) {
		super.updateOpponentBoard(game_status);

	}

	
	/**
	 * Makes a move on the game board in the console version of the game.
	 *
	 * @param r           The row number of the target location.
	 * @param c           The column number of the target location.
	 * @param game_status The current game board status.
	 */
	@Override
	public void makeMoveConsole(int r, int c, Gameboard game_status) {
		super.updateOpponentBoard(game_status);

		game_status.shoot(r,c);

	}
	
	/**
	 * Gets the number of ships the human player has remaining.
	 *
	 * @return The number of ships remaining.
	 */
	@Override
	public int getNumShips() {
		return super.num_shipsAlive;
	}

	/**
	 * Checks if the human player has won the game.
	 *
	 * @return True if all of the human player's ships are sunk, false otherwise.
	 */
	public boolean hasWon() {
		return num_shipsSunk == ships.length;
	}

	
	public int getShipsSunked() {
		return this.num_shipsSunk;
	}

	/**
	 * Gets the number of ships sunk by the human player.
	 *
	 * @return The number of ships sunk.
	 */
	public void setShipsSunked(int s) {
		this.num_shipsSunk = s;
	}

	/**
	 * Once entered (x,y) coordinates we check if rest of the ship should be able to
	 * fit downwards or rightWards.
	 */
	@Override
	protected boolean isValidShipPlacement(Ship ship, int row, int col, boolean isHorizontal) {
		int size = ship.length;

		// Check if the placement will be inbound
		if (row < 0 || col < 0 || row >= game.getRow() || col >= game.getCol()) {
			return false;
		}

		// Check if anyOverlapping occurs
		for (int i = 0; i < size; i++) {
			if (isHorizontal) {
				if (col + i >= game.getCol() || game.containsShip(row, col + i)) {
					return false;
				}
			} else {// vertical
				if (row + i >= game.getRow() || game.containsShip(row, col + i)) {
					return false;
				}
			}
		}

		return true;
	}

	/**
	 * Helper function for Place_ships(): get a valid row (A-J)
	 * 
	 * @return row
	 */
	private int getValidRowInput() {
		boolean valid = false;
		System.out.print("Enter row: (A-J): ");
		int row = -1;

		while (!valid) {

			try {
				String r_str = input.next();
				char rowChar = r_str.toUpperCase().charAt(0);

				row = rowChar - 'A' + 1;
				if (row >= 0 && row <= 9) {
					valid = true;
				} else
					System.out.print("Try Again. Enter Row: (A-J):");

			} catch (Exception e) {
				System.out.println("Invalid input. Please enter a valid row (A-J).");
			}
		}

		return row;
	}

	/**
	 * Helper function for Place_ships(): get a valid row integer (0-9)
	 * 
	 * @return column
	 */
	private int getValidColumnInput() {
		boolean validInput = false;
		int col = -1;
		System.out.print("Enter column: (0-9): ");

		// makes sure it is an integer.
		while (!validInput) {
			try {
				col = input.nextInt();
				if (col >= 0 && col <= 9) {
					validInput = true;
				} else
					System.out.print("Try Again. Enter column: (0-9):");
			} catch (Exception e) {
				input.nextLine();
				System.out.println("ERROR:Invalid input. Enter column: (0-9):");
			}
		}
		return col;
	}

	/**
	 * Helper function for placeShips(): get a valid boolean that tells us if it is
	 * horizontal.
	 * 
	 * @return boolean
	 */
	private boolean getHorizontalInput() {
		boolean validInput = false;
		System.out.print("Horizontal or Vertical? (H for horizontal, V for vertical) ");
		String placement = null;

		while (!validInput) {
			try {
				placement = input.next().toUpperCase();
				if (placement.equals("H") || placement.equals("V")) {
					validInput = true;
				} else
					System.out.print("Try Again. Horizontal or Vertical? (H for horizontal, V for vertical) ");

			} catch (Exception e) {
				input.nextLine();
				System.out.println("Invalid input. Please enter H or V :.");
			}
		}

		return placement.equals("H");
	}

}
