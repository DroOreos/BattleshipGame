import java.util.Scanner;

/**
 * This class represents a human player in the battleShip Game.
 * 
 * @author Pedro
 */
public class HumanPlayer extends AbstractPlayer {

	private Scanner input = new Scanner(System.in);
	private int num_shipsSunk;
	public int[] lengthOfShip = { 5, 4, 3, 3, 2 };

	/**
	 * Constructor
	 * 
	 * @param name of the human player
	 */
	public HumanPlayer(String name) {
		super(name);
		num_shipsSunk = 0;
	}

	/**
	 * Method to place ships to onto the players(human) gameboard
	 * 
	 * @param x           - starting row coordinate
	 * @param y           - starting column coordinate
	 * @param orientation - horizontal or vertival
	 * @param length      - size of the ship being placed
	 */
	public void addShip(int x, int y, boolean orientation, int length) {
		if (isValid(x, y, length, orientation)) {
			GridCell[] arrForShip = new GridCell[length];
			if (orientation) {
				for (int i = 0; i < length; i++) {
					GridCell cell = game.getGridCell(x + i, y);
					if (cell.getState() == GridCell.CellState.SHIP)
						break;

					cell.setState(GridCell.CellState.SHIP);
					arrForShip[i] = cell;

				}
				if (arrForShip[length - 1] != null) {
					Ship newShip = new Ship(arrForShip);
					ships[num_shipsAlive] = newShip;
					num_shipsAlive++;
				}
			} else {
				for (int i = 0; i < length; i++) {
					GridCell cell = game.getGridCell(x, y + i);
					if (cell.getState() == GridCell.CellState.SHIP)
						break;

					cell.setState(GridCell.CellState.SHIP);
					arrForShip[i] = cell;

				}
				if (arrForShip[length - 1] != null) {
					Ship newShip = new Ship(arrForShip);
					ships[num_shipsAlive] = newShip;
					num_shipsAlive++;
				}
			}
		}
	}

	/**
	 * Removes a current Ship on the board.
	 * 
	 * @param game - reference to the game.
	 */
	public void delete(Gameboard game) {
		Ship curShip = ships[getNum_shipsAlive() - 1];
		boolean curOrientation = curShip.orenation;
		int length = curShip.length;
		int x = curShip.getShipArr()[0].getX();
		int y = curShip.getShipArr()[0].getY();

		if (curOrientation) {
			for (int i = 0; i < length; i++) {
				GridCell cell = game.getGridCell(x + i, y);
				cell.setState(GridCell.CellState.EMPTY);
			}
		} else {
			for (int i = 0; i < length; i++) {
				GridCell cell = game.getGridCell(x, y + i);
				cell.setState(GridCell.CellState.EMPTY);
			}
		}
		ships[getNum_shipsAlive() - 1] = null;
		setNum_shipsAlive(getNum_shipsAlive() - 1);

	}

	/**
	 * Helper function: checks if the
	 * 
	 * @param x           - row location
	 * @param y           - col location
	 * @param length      - size ship
	 * @param orientation - horizontal(T); veritical(F)
	 * @return t==valid; f==invalid
	 */
	private boolean isValid(int x, int y, int length, boolean orientation) {
		if (orientation) {
			if (x + length >= 10)
				return false;
		} else {
			if (y + length >= 10)
				return false;
		}
		return true;
	}

	/**
	 * Place the ships for the GUI version.
	 */
	@Override
	public void placeShips(Gameboard game) {
	
		this.updateStatusOfBoard(game);
	}

	/**
	 * Places the ships on the game board by getting valid locations from the user.
	 * 
	 * @param playerBoard
	 */
	public void placeShipsConsole(Gameboard playerBoard) {
		this.updateStatusOfBoard(playerBoard);

		int i = 1;
		for (Ship ship : ships) {
			boolean validLocation = false;
			while (!validLocation) {

				System.out.println("Place Ship# " + i);

				int row = getValidRowInput();
				int col = getValidColumnInput();
				boolean horizontal = getHorizontalInput();

				// if successfully placed ships, exit the while loop
				validLocation = game.placeShip(row, col, ship.length, horizontal);

				if (!validLocation) {
					System.out.println("Invalid Input.");
				}

			}
			i++;
		}
	}

	/**
	 * Makes a move on the game board in the GUI version of the game.
	 *
	 * @param game_status The current game board status.
	 */
	@Override
	public void makeMoveGUI() {

	}

	/**
	 * Makes a move on the game board in the console version of the game.
	 *
	 * @param r           The row number of the target location.
	 * @param c           The column number of the target location.
	 * @param game_status The current game board status.
	 */
	@Override
	public void makeMoveConsole(int r, int c) {
		opponent_game.shoot(r, c);
	}

	/**
	 * Gets the number of ships the human player has remaining.
	 *
	 * @return The number of ships remaining.
	 */
	@Override
	public int getNumShips() {
		return super.getNum_shipsAlive();
	}

	/**
	 * Checks if the human player has won the game.
	 *
	 * @return True if all of the human player's ships are sunk, false otherwise.
	 */
	@Override
	public boolean hasWon() {
		return num_shipsSunk == ships.length;
	}

	public int getShipsSunked() {
		return this.num_shipsSunk;
	}

	/**
	 * Gets the number of ships sunk by the human player.
	 *
	 * @return The number of ships sunk.
	 */
	public void setShipsSunked(int sunk) {
		this.num_shipsSunk = sunk;
	}

	/**
	 * Helper function for Place_ships(): get a valid row (A-J)
	 * 
	 * @return row
	 */
	private int getValidRowInput() {
		boolean valid = false;
		System.out.print("Enter row: (A-J): ");
		int row = -1;

		while (!valid) {

			try {
				String r_str = input.next();
				char rowChar = r_str.toUpperCase().charAt(0);

				row = rowChar - 'A';
				if (row >= 0 && row <= 9) {
					valid = true;
				} else
					System.out.print("Try Again. Enter Row: (A-J):");

			} catch (Exception e) {
				System.out.println("Invalid input. Please enter a valid row (A-J).");
			}
		}

		return row;
	}

	/**
	 * Helper function for Place_ships(): get a valid row integer (0-9)
	 * 
	 * @return column
	 */
	private int getValidColumnInput() {
		boolean validInput = false;
		int col = -1;
		System.out.print("Enter column: (0-9): ");

		// makes sure it is an integer.
		while (!validInput) {
			try {
				col = input.nextInt();
				if (col >= 0 && col <= 9) {
					validInput = true;
				} else
					System.out.print("Try Again. Enter column: (0-9):");
			} catch (Exception e) {
				input.nextLine();
				System.out.println("ERROR:Invalid input. Enter column: (0-9):");
			}
		}
		return col;
	}

	/**
	 * Helper function for placeShips(): get a valid boolean that tells us if it is
	 * horizontal.
	 * 
	 * @return boolean: T = horizontal; F = vertical
	 */
	private boolean getHorizontalInput() {
		boolean validInput = false;
		System.out.print("Horizontal or Vertical? (H for horizontal, V for vertical) ");
		String placement = null;

		while (!validInput) {
			try {
				placement = input.next().toUpperCase();
				if (placement.equals("H") || placement.equals("V")) {
					validInput = true;
				} else
					System.out.print("Try Again. Horizontal or Vertical? (H for horizontal, V for vertical) ");

			} catch (Exception e) {
				input.nextLine();
				System.out.println("Invalid input. Please enter H or V :.");
			}
		}

		return placement.toUpperCase().equals("H");
	}

	/**
	 * Updates the status of both player and AI gameboard.
	 */
	@Override
	public void updateAllGameboards(Gameboard a, Gameboard b) {
		this.game = a;
		this.opponent_game = b;
	}

}