
/**
 * An abstract class representing a player in the Battleship game.
 */
public abstract class AbstractPlayer {

    protected String name;
    protected int hits;
    protected int misses;
    
    protected int num_shipsAlive;
    protected Ship[] ships = new Ship[1];
    
    protected Gameboard game; //place our ships here 
    protected Gameboard opponent_game; // send out attacks here

    public AbstractPlayer(String name) {
        this.name = name;
        
        this.hits = 0;
        this.misses = 0;
        initializeShips();
    }
    
    public void updateAllGameboards(Gameboard a, Gameboard b) {
    	this.game = a;
    	this.opponent_game = b;
    }

    /**
     * initialize one of each ship
     */
    private void initializeShips() {
       // ships[0] = new AircraftCarrier();
       // ships[1] = new Submarine();
       // ships[2] = new Cruiser();
       // ships[3] = new Destroyer();
       // ships[4] = new Battleship();
    	
    	for(int i = 0; i < 1; i++) {
    		ships[i] = new mockSub(3);
    	}
        num_shipsAlive = 5;
    }

    /**
     * Place ships randomly once you create an AI_player object. or humanPlayer manually places ships 
     */
    public abstract void placeShips(Gameboard g);

    /**
     * Makes a move on the game board in the GUI version of the game.
     *
     * @param game The current game board status.
     */
    public abstract void makeMoveGUI();

    /**
     * player move on console
     */
    public abstract void makeMoveConsole(int r, int c);


    /**
     * Gets the number of ships owned by the player.
     *
     * @return The number of ships remaining.
     */
    protected abstract int getNumShips();
    
    /**
     * Updates the game board status for the player.
     *
     * @param game The current game board status.
     */
    protected void updateStatusOfBoard(Gameboard game) {
    	this.game = game;
    }
    public abstract boolean hasWon(); 
    
    /**
     * Updates the game board status for the opponent of the player. (mainly for attacks)
     *
     * @param game The current game board status.
     */
    protected void updateOpponentBoard(Gameboard game) {
    	this.opponent_game = game;
    }
    public String getName() {
    	return this.name;
    }
    
}
