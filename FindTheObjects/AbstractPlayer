
/**
 * An abstract class representing a player in the Battleship game.
 */
public abstract class AbstractPlayer {

    protected String name;
    protected int hits;
    protected int misses;
    
    private int num_shipsAlive;
    protected Ship[] ships = new Ship[5];
    
    protected Gameboard game; //place our ships here 
    protected Gameboard opponent_game; // send out attacks here

    public AbstractPlayer(String name) {
        this.name = name;
        
        this.hits = 0;
        this.misses = 0;
        initializeShips();
    }
    
    public abstract void updateAllGameboards(Gameboard p, Gameboard o);

    /**
     * initialize one of each ship
     */
    private void initializeShips() {
    	
        setNum_shipsAlive(0);
    }

    /**
     * Place ships randomly once you create an AI_player object. or humanPlayer manually places ships 
     */
    public abstract void placeShips(Gameboard g);

    /**
     * Makes a move on the game board in the GUI version of the game.
     *
     * @param game The current game board status.
     */
    public abstract void makeMoveGUI();

    /**
     * player move on console
     */
    public abstract void makeMoveConsole(int r, int c);


    /**
     * Gets the number of ships owned by the player.
     *
     * @return The number of ships remaining.
     */
    protected abstract int getNumShips();
    
    /**
     * Updates the game board status for the player.
     *
     * @param game The current game board status.
     */
    protected void updateStatusOfBoard(Gameboard game) {
    	this.game = game;
    }
    public abstract boolean hasWon(); 
    
    /**
     * Updates the game board status for the opponent of the player. (mainly for attacks)
     *
     * @param game The current game board status.
     */
    protected void updateOpponentBoard(Gameboard game) {
    	this.opponent_game = game;
    }
    public String getName() {
    	return this.name;
    }
    public Ship[] getShipArr(){
        return this.ships;
    }
    public void delete(Gameboard game) {
		Ship curShip = ships[getNum_shipsAlive()-1];
		boolean curOrientation = curShip.orenation;
		int length = curShip.length;
		int x = curShip.getShipArr()[1].getX();
		int y = curShip.getShipArr()[1].getY();

		if (curOrientation) {
			for(int i =0; i<length;i++) {
				GridCell cell =	game.getGridCell(x+i,y);
				cell.setState(GridCell.CellState.EMPTY);
			}
		}
		else {
			for(int i =0; i<length;i++) {
				GridCell cell =	game.getGridCell(x,y+i);
				cell.setState(GridCell.CellState.EMPTY);
			}
		}
		
		
		ships[getNum_shipsAlive()-1]=null;
		setNum_shipsAlive(getNum_shipsAlive() - 1);
		
	}

	public int getNum_shipsAlive() {
		return num_shipsAlive;
	}

	public void setNum_shipsAlive(int num_shipsAlive) {
		this.num_shipsAlive = num_shipsAlive;
	}

    
}
