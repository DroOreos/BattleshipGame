
public class BattleshipConsolGame {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Step 1: Set up the game
        int rows = 10; 
        int cols = 10;
        Gameboard playerBoard = new Gameboard(rows, cols);
        Gameboard opponentBoard = new Gameboard(rows, cols);
     

     // Step 2: Place ships for the human player
        AbstractPlayer humanPlayer = new HumanPlayer("Player 1 bob"); 
        ((HumanPlayer) humanPlayer).placeShipsConsole(); // cast down


        // Step 3: Place ships for the AI player (random placement)
        AbstractPlayer aiPlayer = new AIPlayer("AI Player");
        ((AIPlayer) aiPlayer).placeShips();

        // Step 4: Game starts here:
        boolean isGameOver = false;

        while ( !isGameOver ) {
        	
            // Player's goes first.
            System.out.println("Enter coordinates (row, col) to shoot: ");
            int row = getValidInput("Row (A-J): ", scanner);
            int col = getValidInput("Column (0-9): ", scanner);

            // Make player move and update the boards
            humanPlayer.makeMoveConsole(row, col, opponentBoard);

            //PRINT THE BOARD HERE:
            printAIBoard(opponentBoard);
            printPlayerBoard(playerBoard);
            
         
            // Check if the player has won
            if ( humanPlayer.hasWon() ) {
                System.out.println(humanPlayer.getName() + " won!");
                isGameOver = true;
                break;
            }

            // AI's turn 
            aiPlayer.makeMoveConsole(); //or aiPlayer.makeMove();
            
            //PRINT THE BOARD HERE:
            printAIBoard(opponentBoard);
            printPlayerBoard(playerBoard);
            
            
            // Check if the AI has won
            if (aiPlayer.hasWon()) {
                System.out.println("AI Player won!");
                isGameOver = true;
                break;
            }
        }

        // Step 5: Game ended
        scanner.close();
    }

    /**
     * Print the player board to console. Should print ships location, hits and missed from ai
     * @param playerBoard
     */
    private static void printPlayerBoard(Gameboard playerBoard) {
        GridCell[][] gridBoard = playerBoard.getGrid();

        System.out.println("Your Board:");
        System.out.print("\n");
        for (int col = 0; col < gridBoard[0].length; col++) {
            System.out.print(col + " ");
        }
        System.out.println();

        char rowChar = 'A';
        for (int row = 0; row < gridBoard.length; row++) {
            System.out.print(rowChar + " ");
            for (int col = 0; col < gridBoard[row].length; col++) {
                GridCell.CellState state = gridBoard[row][col].getState();
                char cellChar = '~';
                switch (state) {
                    case EMPTY:
                        cellChar = '~';
                        break;
                    case SHIP:
                        cellChar = 'S';
                        break;
                    case HIT:
                        cellChar = 'H';
                        break;
                    case MISS:
                        cellChar = 'M';
                        break;

                }
                System.out.print(cellChar + " ");
            }
            System.out.println();
            rowChar++;
        }
    }

    /**
     * Print the ai board. should hide the ships but show Hit or Miss
     * @param opponentBoard
     */
    private static void printAIBoard(Gameboard opponentBoard) {
        GridCell[][] gridBoard = opponentBoard.getGrid();

        System.out.println("AI Board:");
        System.out.print("\n");
        for (int col = 0; col < gridBoard[0].length; col++) {
            System.out.print(col + " ");
        }
        System.out.println();

        char rowChar = 'A';
        for (int row = 0; row < gridBoard.length; row++) {
            System.out.print(rowChar + " ");
            for (int col = 0; col < gridBoard[row].length; col++) {
                GridCell.CellState state = gridBoard[row][col].getState();
                char cellChar;
                if (state == GridCell.CellState.HIT) {
                    cellChar = 'H';
                }else if(state == GridCell.CellState.MISS) {
                	cellChar = 'M';
                }else {
       
                    cellChar = '~'; // Hide ships for AI board
                }
                System.out.print(cellChar + " ");
            }
            System.out.println();
            rowChar++;
        }
    }


	// Helper method to get valid input from the user
    private static int getValidInput(String msg, Scanner scan) {
    	
    	boolean validInput = false;
        System.out.print(msg);
    	int row = -1;
    	
        while ( !validInput ) {
            try {
            	
                String input = scan.nextLine().toUpperCase();
                
                char rowChar = input.charAt(0);
                row = rowChar - 'A';
                int col = Integer.parseInt(input.substring(1));

                if (row >= 0 && row < 10 && col >= 0 && col < 10) {
                    validInput = true;
                } else {
                    System.out.println("Invalid input. " + msg);
                }
            } catch (Exception e) {
                System.out.println("Invalid input. " + msg);
            }
        }
        return row;
    }
    
}
