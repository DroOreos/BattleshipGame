
import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.canvas.Canvas;
import javafx.scene.canvas.GraphicsContext;
import javafx.scene.layout.Background;
import javafx.scene.layout.BackgroundFill;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.Pane;
import javafx.scene.paint.Color;
import javafx.scene.shape.LineTo;
import javafx.scene.shape.MoveTo;
import javafx.stage.Stage;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.geometry.Pos;
import javafx.scene.input.MouseButton;
import javafx.scene.input.MouseEvent;
import javafx.animation.PathTransition;
import java.util.Random;
import javafx.util.Duration;
import model.Gameboard;
import model.GridCell;
import model.Ship;
import model.theBattleShipGame;

import java.lang.reflect.Array;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Random;

import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.paint.ImagePattern;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.StackPane;
import javafx.scene.shape.Path;
import model.Observer;

//import import javafx.scene.

public class BattleShipView extends BorderPane implements Observer {

//	private theBattleShipGame theGame;
	private Image waterCell_Image;
	private ImageView rocket_Image;
	private Image hit_Image;
	private Image miss_Image;

	private ArrayList<Ship> player_ships;
	private ArrayList<Ship> opponent_ships;

	// keep track of the ship being dragged.
	private ImageView selectedShip = null;
	private double offsetX, offsetY;

	// ALL Battleships Horizontal
	private Image aircraft_h; // 5 spaces
	private Image battleship_h; // 4 spaces
	private Image cruiser_h; // 3 spaces
	private Image submarine_h; // 3 spaces
	private Image destroyer_h; // 2 spaces

	// ALL Battleships Vertical
	private Image aircraft_v; // 5 spaces
	private Image battleship_v; // 4 spaces
	private Image cruiser_v; // 3 spaces
	private Image submarine_v; // 3 spaces
	private Image destroyer_v; // 2 spaces
	Random rand = new Random();
	int row;
	int col;
	boolean d;
	int direction;

	ImageView[] shipImages;
	private ArrayList<ImageView> shipImageViews = new ArrayList<>();

	private static final int BOARD_WIDTH = 500; // 50 pixels per cell * 10 columns
	private static final int BOARD_HEIGHT = 300; // 30 pixels per cell * 10 rows
	private static final int BOARD_ROWS = 10;
	private static final int BOARD_COLS = 10;
	private static final int CELL_WIDTH = BOARD_WIDTH / BOARD_COLS;
	private static final int CELL_HEIGHT = BOARD_HEIGHT / BOARD_ROWS;

	// 0 --> 9
	private int location_x;
	private int location_y;

	// pixels of the location
	private int rowCell_coordinate;
	private int colCell_coordinate;

	Pane opponentPane;
	private Pane playerBoardPane = new Pane();

	private static final double rocketX = 0;
	private static final double rocketY = 500;

	private Canvas playerBoardCanvas = new Canvas(BOARD_WIDTH, BOARD_HEIGHT);
	private Canvas opponentBoardCanvas = new Canvas(BOARD_WIDTH, BOARD_HEIGHT);

	private GridCell[][] playerB;
	private GridCell[][] opponentB;

	private ArrayList<ArrayList<Integer>> playerShips = new ArrayList<>();
	// private ArrayList<>

	private theBattleShipGame theGame;

	/**
	 * Constructor
	 * 
	 * @param theGame - current state of the battleship game
	 */
	public BattleShipView(theBattleShipGame theGame) {
		this.theGame = theGame;
		theGame.addObserver(this);
		initializeBackround();

		initializeAllPanel();

		initializeImages();

		initializeRocket();

		setUpPlayerShips();

		handlers();
	}

	/**
	 * Set up the background Image
	 */
	private void initializeBackround() {
		try {
			// Load the background image
			URL backgroundImageUrl = new URL(
					"https://c4.wallpaperflare.com/wallpaper/965/883/624/manga-one-piece-wallpaper-preview.jpg");
			Image backgroundImage = new Image(backgroundImageUrl.toString());

			ImagePattern imagePattern = new ImagePattern(backgroundImage);

			// Set the ImagePattern as the background for the BorderPane
			this.setBackground(new Background(new BackgroundFill(imagePattern, null, null)));
		} catch (MalformedURLException e) {
			e.printStackTrace();
		}
	}

	/**
	 * Set up and display the gameboards to the gui.
	 */
	private void initializeAllPanel() {
		this.setTop(getOpponentBoardCanvas());
		this.setBottom(getPlayerBoardCanvas());

		this.setAlignment(getOpponentBoardCanvas(), Pos.BOTTOM_CENTER);
		this.setAlignment(getPlayerBoardCanvas(), Pos.TOP_CENTER);
		try {
			// Load the water image
			URL imageUrl = new URL("https://thumbs.dreamstime.com/b/pixel-art-water-pool-background-213938739.jpg");

			waterCell_Image = new Image(imageUrl.toString());

			setCells(getOpponentBoardCanvas());
			setCells(getPlayerBoardCanvas());
		} catch (MalformedURLException e) {
			e.printStackTrace();
		}
		drawB(getOpponentBoardCanvas()); // draw the boards here
		drawB(getPlayerBoardCanvas());
	}

	/**
	 * Load all imagess from URL and store them in the class.
	 */
	private void initializeImages() {
		shipImages = new ImageView[5];

		try {
			URL hit = new URL(
					"https://png.pngtree.com/png-clipart/20190416/ourmid/pngtree-fire-flame-blast-png-png-image_946469.jpg");
			hit_Image = new Image(hit.toString());

			URL miss = new URL(
					"https://previews.123rf.com/images/the8monkey/the8monkey2005/the8monkey200500135/147458470-vector-frame-water-splash-for-game-animation-water-explosion-special-effect-fx-animation-frame-on.jpg");
			miss_Image = new Image(miss.toString());

			// ALL SHIP Images Declared Here
			URL ship1 = new URL(
					"https://img.favpng.com/4/14/5/ship-aircraft-carrier-united-states-navy-clip-art-png-favpng-YJvtPmWSFN7q50g50bnHU53j2.jpg");
			shipImages[0] = new ImageView(ship1.toString());

			URL ship2 = new URL(
					"https://creazilla-store.fra1.digitaloceanspaces.com/cliparts/3868258/battleship-clipart-md.png");
			shipImages[1] = new ImageView(ship2.toString());

			URL ship3 = new URL(
					"https://static.vecteezy.com/system/resources/thumbnails/019/007/990/small/yacht-cruise-ship-png.png");
			shipImages[2] = new ImageView(ship3.toString());

			URL ship4 = new URL(
					"https://p.turbosquid.com/ts-thumb/iS/z7mXc9/3l/submarine_oceangate_titan/jpg/1637404259/1920x1080/turn_fit_q99/96ecaa6f68c7e9fb1881b7c070c3134479f33dad/submarine_oceangate_titan-1.jpg");
			shipImages[3] = new ImageView(ship4.toString());

			URL ship5 = new URL("https://cdn.pixabay.com/photo/2020/08/28/01/58/raft-5523297_1280.png");
			shipImages[4] = new ImageView(ship5.toString());

		} catch (MalformedURLException e) {
			e.printStackTrace();
		}
	}

	/**
	 * Load up the rocket image and place it on the grid.
	 */
	private void initializeRocket() {

		try {
			// Load the rocket image from the URL
			URL imageUrl = new URL(
					"https://www.kindpng.com/picc/m/179-1797286_ufo-png-pixel-walking-dead-pixel-art-transparent.png");

			Image rocketImage = new Image(imageUrl.toString());

			// Create the rocket here
			rocket_Image = new ImageView(rocketImage);
			rocket_Image.relocate(rocketX, rocketY);

			rocket_Image.setFitWidth(CELL_WIDTH);
			rocket_Image.setFitHeight(CELL_HEIGHT);

			opponentPane = new Pane(getOpponentBoardCanvas(), rocket_Image);
			this.setCenter(opponentPane);
			BorderPane.setAlignment(opponentPane, Pos.TOP_CENTER);
		} catch (MalformedURLException e) {
			e.printStackTrace();
		}
	}

	/**
	 * Place the ships on the board with a default placement.
	 */
	private void setUpPlayerShips() {
		theGame.placeAIShips();

		GraphicsContext gc = getPlayerBoardCanvas().getGraphicsContext2D();

		// default ships are placed
		getRand();
		theGame.getHumanPlayer().addShip(row, col, d, 5);
		checkIfValid(1, row, col, d, 5);
		playerShips.add(new ArrayList<>(Arrays.asList(row, col, direction, 5, 0))); // Aircraft Carrier

		getRand();
		theGame.getHumanPlayer().addShip(row, col, d, 4);
		checkIfValid(2, row, col, d, 4);
		playerShips.add(new ArrayList<>(Arrays.asList(row, col, direction, 4, 1))); // Battleship

		getRand();
		theGame.getHumanPlayer().addShip(row, col, d, 3);
		checkIfValid(3, row, col, d, 5);
		playerShips.add(new ArrayList<>(Arrays.asList(row, col, direction, 3, 2))); // Submarine

		getRand();
		theGame.getHumanPlayer().addShip(row, col, d, 3);
		checkIfValid(4, row, col, d, 5);
		playerShips.add(new ArrayList<>(Arrays.asList(row, col, direction, 3, 3))); // Cruiser

		getRand();
		theGame.getHumanPlayer().addShip(row, col, d, 2);
		checkIfValid(5, row, col, d, 5);
		playerShips.add(new ArrayList<>(Arrays.asList(row, col, direction, 2, 4))); // Destroyer

		// ArrayList = ( x, y, vertical == 1, size, Image)

		placeShips();

	}

	/**
	 * double checks to see if the ship is added to the board in bound
	 * 
	 * @param d2   - horizontal or vertical
	 * @param col2 - location to add
	 * @param row2 - location to add
	 * @param i    - ships[] size
	 * @param j    - length of ship
	 */
	private void checkIfValid(int i, int row2, int col2, boolean d2, int j) {
		while (theGame.getHumanPlayer().getNumShips() != i) {
			getRand();
			theGame.getHumanPlayer().addShip(row, col, d, j);
			// System.out.println(theGame.getHumanPlayer().getNumShips());
		}

	}

	/**
	 * set the randomness of the player ships.
	 */
	private void getRand() {
		row = rand.nextInt(10);
		col = rand.nextInt(10);
		d = false;
		direction = 0;
	}

	/**
	 * Helper functions to diplay the ships on the board.
	 */
	private void placeShips() {
		GraphicsContext gc = getPlayerBoardCanvas().getGraphicsContext2D();

		for (ArrayList<Integer> ship : playerShips) {
			int xStart = ship.get(0);
			int yStart = ship.get(1);
			int vertical = ship.get(2);
			int size = ship.get(3);
			int imageIndex = ship.get(4);

			getCellPixels(xStart, yStart);

			int width, height;

			if (vertical == 1) {
				width = CELL_WIDTH;
				height = CELL_HEIGHT * size;
			} else {
				width = CELL_WIDTH * size;
				height = CELL_HEIGHT;
			}

			ImageView shipImageView = new ImageView(shipImages[imageIndex].getImage());
			shipImageView.relocate(rowCell_coordinate, colCell_coordinate);
			shipImageView.setFitWidth(width);
			shipImageView.setFitHeight(height);
			shipImageViews.add(shipImageView);

			shipImageView.setOnMousePressed(new ShipDragHandler());
			shipImageView.setOnMouseDragged(new ShipDragHandler());
			shipImageView.setOnMouseReleased(new ShipDragHandler());

			gc.drawImage(shipImages[imageIndex].getImage(), rowCell_coordinate, colCell_coordinate, width, height);
		}
	}

//-----------------------------HELPER FUNCTIONS--------------------
	/**
	 * Helper Function: draw the grid lines on the gameboard.
	 * 
	 * @param board - reference to the board. (human or ai board)
	 */
	private void drawB(Canvas board) {
		GraphicsContext gc = board.getGraphicsContext2D();

		// Draw the grid lines.
		gc.setStroke(Color.BLACK);
		for (int row = 0; row <= BOARD_ROWS; row++) {
			double y = row * CELL_HEIGHT;
			gc.strokeLine(0, y, BOARD_WIDTH, y);
		}
		for (int col = 0; col <= BOARD_COLS; col++) {
			double x = col * CELL_WIDTH;
			gc.strokeLine(x, 0, x, BOARD_HEIGHT);
		}
	}

	/**
	 * Helper Function: Set up every cell with a water image.
	 * 
	 * @param board - reference to the gameboard.
	 * @throws MalformedURLException
	 */
	private void setCells(Canvas board) throws MalformedURLException {
		GraphicsContext gc = board.getGraphicsContext2D();

		for (int row = 0; row < BOARD_ROWS; row++) {
			for (int col = 0; col < BOARD_COLS; col++) {
				double x = col * CELL_WIDTH;
				double y = row * CELL_HEIGHT;
				gc.drawImage(waterCell_Image, x, y, CELL_WIDTH, CELL_HEIGHT);
			}
		}
	}

	/**
	 * Convert the location (0-9) into the cell pixels to place in the correct cell
	 * location.
	 * 
	 * @param row: 0 - 9
	 * @param col: 0 - 9
	 */
	private void getCellPixels(int row, int col) {

		rowCell_coordinate = col * CELL_WIDTH;
		colCell_coordinate = row * CELL_HEIGHT;

	}
//-----------------------------------------------------------------
//--------------------------OBSERVRER( update game)-----------------

	/**
	 * Update the GUI
	 */
	@Override
	public void update(Object theObserved) {
		// TODO Auto-generated method stub

		// PLAYER GRIDCELLS
		playerB = theGame.get_playerB().getGrid();
		GraphicsContext gc = getPlayerBoardCanvas().getGraphicsContext2D();

		updateBoard(playerB, gc);

		opponentB = theGame.get_opponentB().getGrid();
		gc = getOpponentBoardCanvas().getGraphicsContext2D();
		updateBoard(opponentB, gc);
	}

	/**
	 * Helper Function: loop through both grids to update the gui with the proper
	 * images.
	 * 
	 * @param board - reference to the gamebord
	 * @param gc    - Graphic Contents
	 */
	private void updateBoard(GridCell[][] board, GraphicsContext gc) {
		for (int i = 0; i < board.length; i++) {
			for (int j = 0; j < board[i].length; j++) {

				getCellPixels(i, j);

				switch (board[i][j].getState()) {

				case HIT:
					gc.drawImage(hit_Image, rowCell_coordinate, colCell_coordinate, CELL_WIDTH, CELL_HEIGHT);
					break;

				case MISS:
					gc.drawImage(miss_Image, rowCell_coordinate, colCell_coordinate, CELL_WIDTH, CELL_HEIGHT);
					break;
				}
			}
		}

	}

	// ------------------------------------------------------------------

	/**
	 * Getter();
	 * 
	 * @return - Gameboard of the player
	 */
	public Canvas getPlayerBoardCanvas() {
		return playerBoardCanvas;
	}

	/**
	 * Setter()
	 * 
	 * @param playerBoardCanvas
	 */
	public void setPlayerBoardCanvas(Canvas playerBoardCanvas) {
		this.playerBoardCanvas = playerBoardCanvas;
	}

	/**
	 * Getter()
	 * 
	 * @return - Gameboard of the AI.
	 */
	public Canvas getOpponentBoardCanvas() {
		return opponentBoardCanvas;
	}

	/**
	 * Setter();
	 * 
	 * @param opponentBoardCanvas
	 */
	public void setOpponentBoardCanvas(Canvas opponentBoardCanvas) {
		this.opponentBoardCanvas = opponentBoardCanvas;
	}

	/**
	 * Handlers
	 */
	public void handlers() {
		opponentBoardCanvas.setOnMouseClicked(new MouseListener_X());

	}

	/**
	 * When the user clicks a cell in the opponent board( attacking ), we will send
	 * the attack to the ai board. and create an animation that simmulated an
	 * 'attack'
	 */
	private class MouseListener_X implements EventHandler<MouseEvent> {

		/**
		 * Get the location of where the user clicks, and check if it is a valid
		 * placement before attacking.
		 */
		@Override
		public void handle(MouseEvent me) {
			// Get the pixel where the canvas was just clicked
			double row = me.getY();
			double col = me.getX();

			int r = (int) (row / CELL_HEIGHT);
			int c = (int) (col / CELL_WIDTH);

			boolean successfull = theGame.setPAttack(r, c);
			if (successfull) {
				theGame.setOAttack(r, c);
				animateRocket(col, row);
			}
		}

		/**
		 * PathTransition Animation.
		 * 
		 * @param targetX - (row) location to send the animation to.
		 * @param targetY - (col) location to send the animation to.
		 */
		private void animateRocket(double targetX, double targetY) {

			double grid_row = opponentBoardCanvas.localToScene(targetX, targetY).getX();
			double grid_col = opponentBoardCanvas.localToScene(targetX, targetY).getY();

			// Create a Path with LineTo elements for the rocket animation
			Path path = new Path();
			path.getElements().add(new MoveTo(50, 100));
			path.getElements().add(new LineTo(grid_row, grid_col - 500));
			path.getElements().add(new LineTo(50, 100));

			// Create a PathTransition to animate the rocket
			PathTransition pT = new PathTransition();
			pT.setDuration(Duration.millis(2000));
			pT.setNode(rocket_Image);
			pT.setPath(path);

			// Start the rocket animation
			pT.play();
		}

	}

	/**
	 * Implementation for clicking, dragging and droppins ships. basically checks to
	 * see if the mouse is over the ship image view in order to begin dragging.
	 *
	 */
	private class ShipDragHandler implements EventHandler<MouseEvent> {
		private double offsetX, offsetY;
		private ImageView selectedShip;

		@Override
		public void handle(MouseEvent event) {
			double mouseX = event.getX();
			double mouseY = event.getY();

			System.out.println("(" + mouseX + "," + mouseY + ")");

			if (event.getEventType() == MouseEvent.MOUSE_PRESSED) {

				// Check if the press was on any of the ship ImageView objects
				for (ImageView shipImageView : shipImageViews) {
					if (isMouseOverImage(shipImageView, mouseX, mouseY)) {

					}
				}
			} else if (event.getEventType() == MouseEvent.MOUSE_DRAGGED && selectedShip != null) {
				double newX = event.getX() - offsetX;
				double newY = event.getY() - offsetY;

				// Clear the canvas and redraw the ships at the new positions
				GraphicsContext gc = getPlayerBoardCanvas().getGraphicsContext2D();
				gc.clearRect(0, 0, BOARD_WIDTH, BOARD_HEIGHT);

				for (ImageView shipImageView : shipImageViews) {
					if (shipImageView == selectedShip) {
						shipImageView.relocate(newX, newY);
					}
					gc.drawImage(shipImageView.getImage(), shipImageView.getX(), shipImageView.getY());
				}
			} else if (event.getEventType() == MouseEvent.MOUSE_RELEASED) {
				selectedShip = null;
			}
		}

		private boolean isMouseOverImage(ImageView imageView, double mouseX, double mouseY) {
			double imageX = imageView.getX();
			double imageY = imageView.getY();
			double imageWidth = imageView.getFitWidth();
			double imageHeight = imageView.getFitHeight();

			return mouseX >= imageX && mouseX <= imageX + imageWidth && mouseY >= imageY
					&& mouseY <= imageY + imageHeight;
		}
	}

}
